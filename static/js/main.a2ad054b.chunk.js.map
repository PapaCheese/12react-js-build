{"version":3,"sources":["assets/go.png","assets/PRESETS.png","Splash.js","assets/ADD PRESET.png","assets/EDIT.png","assets/DELETE.png","Presets.js","Nav.js","assets/PRO.png","assets/SHARE.png","assets/LEARN.png","assets/RESET.png","assets/KIT.png","Links.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Splash","navigate","useNavigate","className","src","goIcon","onClick","presetsIcon","Presets","dummyData","queue","name","repeat","addPresetIcon","style","width","map","preset","type","value","editIcon","deletIcon","Nav","onGoPressed","console","log","Links","proIcon","shareIcon","learnIcon","resetIcon","kitIcon","appStyle","background","color","App","basename","process","path","element","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2ad054b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/go.a432093a.png\";","export default __webpack_public_path__ + \"static/media/PRESETS.f29c75bc.png\";","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nimport goIcon from \"./assets/go.png\"\r\nimport presetsIcon from \"./assets/PRESETS.png\"\r\n\r\n\r\nfunction Splash() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n\r\n    function onGoPressed() {\r\n        navigate(\"/go\")\r\n    }\r\n\r\n    function onPresetsPressed() {\r\n        navigate(\"/presets\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"nav\">\r\n                <img className=\"nav-button\" src={goIcon} onClick={onGoPressed} />\r\n                <img className=\"nav-button\" src={presetsIcon} onClick={onPresetsPressed} />\r\n            </div>\r\n            <div className=\"logo\">\r\n                Want To React?\r\n                <br />\r\n                <span className=\"logo big\">\r\n                    12REACT\r\n                </span>\r\n                <br />\r\n                <span className=\"logo small\">\r\n                    The Best U Can B\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Splash\r\n","export default __webpack_public_path__ + \"static/media/ADD PRESET.cf36ed4b.png\";","export default __webpack_public_path__ + \"static/media/EDIT.0467500a.png\";","export default __webpack_public_path__ + \"static/media/DELETE.b7dd0dfb.png\";","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nimport goIcon from \"./assets/go.png\"\r\nimport addPresetIcon from \"./assets/ADD PRESET.png\"\r\nimport editIcon from \"./assets/EDIT.png\"\r\nimport deletIcon from \"./assets/DELETE.png\"\r\n\r\n\r\n\r\nfunction Presets() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const dummyData = [\r\n        {\r\n            queue: 0,\r\n            name: \"test_1\",\r\n            repeat: 1,\r\n        },\r\n        {\r\n            queue: 0,\r\n            name: \"test_2\",\r\n            repeat: 1,\r\n        },\r\n        {\r\n            queue: 0,\r\n            name: \"test_3\",\r\n            repeat: 1,\r\n        },\r\n        {\r\n            queue: 0,\r\n            name: \"test_4\",\r\n            repeat: 1,\r\n        },\r\n    ]\r\n\r\n\r\n    function onGoPressed() {\r\n        navigate(\"/go\")\r\n    }\r\n\r\n    function onPresetsPressed() {\r\n        navigate(\"/presets\")\r\n    }\r\n\r\n    function renderTableData() {\r\n        return dummyData.map((preset) => {\r\n            const { queue, name, repeat } = preset //destructuring\r\n            return (\r\n                <tr key={name}>\r\n                    <td >{queue}</td>\r\n                    <td style={{ width: \"85%\" }}>{name}</td>\r\n                    <td >\r\n                        <input type=\"text\" value={repeat} />\r\n                    </td>\r\n                    <td >\r\n                        <img className=\"table-button\" src={editIcon} />\r\n                    </td>\r\n                    <td >\r\n                        <img className=\"table-button\" src={deletIcon} />\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"nav\">\r\n                <img className=\"nav-button\" src={goIcon} onClick={onGoPressed} />\r\n                <img className=\"nav-button\" src={addPresetIcon} onClick={onPresetsPressed} />\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ width: \"10%\" }}>queue</th>\r\n                        <th>name</th>\r\n                        <th style={{ width: \"10%\" }}>repeat</th>\r\n                        <th style={{ width: \"10%\" }}>edit</th>\r\n                        <th style={{ width: \"10%\" }}>delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderTableData()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Presets\r\n","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nimport goIcon from \"./assets/go.png\"\r\nimport presetsIcon from \"./assets/PRESETS.png\"\r\n\r\nfunction Nav() {\r\n    const navigate = useNavigate();\r\n\r\n\r\n    function onGoPressed() {\r\n        navigate(\"/presets\")\r\n    }\r\n\r\n    function onPresetsPressed() {\r\n        navigate(\"/presets\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            <img className=\"nav-button\" src={goIcon} onClick={onGoPressed} />\r\n            <img className=\"nav-button\" src={presetsIcon} onClick={onPresetsPressed} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","export default __webpack_public_path__ + \"static/media/PRO.7d4ae8f7.png\";","export default __webpack_public_path__ + \"static/media/SHARE.72241eb0.png\";","export default __webpack_public_path__ + \"static/media/LEARN.702ddc0e.png\";","export default __webpack_public_path__ + \"static/media/RESET.0760be60.png\";","export default __webpack_public_path__ + \"static/media/KIT.973e2ba0.png\";","import React from 'react'\r\n\r\nimport proIcon from \"./assets/PRO.png\"\r\nimport shareIcon from \"./assets/SHARE.png\"\r\nimport learnIcon from \"./assets/LEARN.png\"\r\nimport resetIcon from \"./assets/RESET.png\"\r\nimport kitIcon from \"./assets/KIT.png\"\r\n\r\n\r\nfunction onGoPressed() {\r\n    console.log(\"go pressed\");\r\n}\r\n\r\nfunction Links() {\r\n    return (\r\n        <div className=\"footer-links\">\r\n            <img className=\"nav-button\" src={proIcon} onClick={onGoPressed} />\r\n            <img className=\"nav-button\" src={shareIcon} onClick={onGoPressed} />\r\n            <img className=\"nav-button\" src={learnIcon} onClick={onGoPressed} />\r\n            <img className=\"nav-button\" src={resetIcon} onClick={onGoPressed} />\r\n            <img className=\"nav-button\" src={kitIcon} onClick={onGoPressed} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Links\r\n","import React from 'react';\n\nimport Splash from \"./Splash\"\nimport Presets from \"./Presets\"\n\nimport Nav from \"./Nav\"\nimport Links from \"./Links\"\n\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n\n\nimport './App.css';\n\nconst appStyle = {\n  background: \"black\",\n  color: \"white\"\n}\n\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\" style={appStyle}>\n        <Routes>\n          <Route path=\"/\" element={<Splash />} />\n          <Route path=\"presets\" element={<Presets />} />\n        </Routes>\n        <Links />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}